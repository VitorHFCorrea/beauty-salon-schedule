generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Salon {
  id          String         @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  services    SalonService[] //Salon possui vários serviços [indicado pelo array]
}

model SalonService {
  id          String    @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal   @db.Decimal(10, 2)
  salonId     String
  salon       Salon     @relation(fields: [salonId], references: [id]) // SalonService{salonId} = Salon{id}
  bookings    Booking[]
}

model Booking {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id]) // Booking{userId} = User{id}
  serviceId String
  service   SalonService @relation(fields: [serviceId], references: [id])
  date      DateTime // data agendada
  createdAt DateTime     @default(now()) // momento da criação do agendamento
  updatedAt DateTime     @updatedAt // momento da atualização do agendamento
}
